id: automation_otchet_po_sostoianiiu_batarei_v3_7_4_ru # <--- ДОБАВЛЕН УНИКАЛЬНЫЙ ID

blueprint:
  name: 🪫 Отчет по состоянию батарей (v3.7.4)
  description: |
    Создает два кратких отчета (с разделением на "Замена" и "Зарядка") по устройствам, заряд которых ниже критического уровня. 
    Отправляет отчеты на мобильное устройство и/или в Telegram в заданное время и дни недели, с указанием типа и количества элементов питания. 
    
    **ИСПРАВЛЕНИЕ v3.7.4:** Критическое исправление для экранирования MarkdownV2 в сообщениях Telegram, из-за которого краткие отчеты могли не отправляться.
    
    **Важное требование!** Для работы автоматизации необходимо предварительно установить и настроить интеграцию **HA-Battery Notes**.
  domain: automation
  source_url: https://raw.githubusercontent.com/Eugen417/homeassistant-blueprints/refs/heads/main/Battery_Report_V3.4_RU.yaml
  
  input:
    # 1. ТРИГГЕРЫ
    trigger_time:
      name: ⏰ Время запуска
      description: Время ежедневной проверки (например, 08:00:00).
      selector:
        time:
    trigger_days:
      name: 🗓️ Дни недели для проверки (КРАТКИЙ ОТЧЕТ)
      description: Выберите дни, когда должен запускаться КРАТКИЙ отчет (необязательно). Если не выбрано, запускается каждый день.
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Понедельник
              value: Mon
            - label: Вторник
              value: Tue
            - label: Среда
              value: Wed
            - label: Четверг
              value: Thu
            - label: Пятница
              value: Fri
            - label: Суббота
              value: Sat
            - label: Воскресенье
              value: Sun

    # 2. УСТРОЙСТВА И ПОРОГИ
    
    mobile_notify_target:
      name: 📱 Мобильное устройство (Приложение Home Assistant)
      description: Выберите ОДНО устройство для push-уведомлений. Оставьте пустым, если не нужно.
      default: ""
      selector:
        device:
          integration: mobile_app
    
    telegram_notify_target:
      name: 💬 Целевые уведомления Telegram
      description: Выберите сущности вашего сервиса Telegram (notify.telegram_bot_...). Их ID будут извлечены автоматически.
      default:
        entity_id: []
      selector:
        target:
          entity:
            - domain: notify

    send_full_report_option:
      name: 📊 Отправлять Полный отчет вторым сообщением (Telegram)?
      description: Включите для получения полного списка всех батарей.
      default: false
      selector:
        boolean:

    full_report_days:
      name: 📅 Дни недели для ПОЛНОГО ОТЧЕТА (Telegram)
      description: Выберите дни, когда должен отправляться полный отчет, если опция включена. Оставьте пустым для ежедневной отправки.
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Понедельник
              value: Mon
            - label: Вторник
              value: Tue
            - label: Среда
              value: Wed
            - label: Четверг
              value: Thu
            - label: Пятница
              value: Fri
            - label: Суббота
              value: Sat
            - label: Воскресенье
              value: Sun
    
    critical_level:
      name: ⚠️ Критический уровень (%)
      description: Уровень заряда, ниже которого устройство помечается как требующее ЗАРЯДКИ/ЗАМЕНЫ. По умолчанию 15%.
      default: 15
      selector:
        number:
          min: 1
          max: 99
          step: 1
          unit_of_measurement: "%"
          mode: box
          
    excluded_sensors:
      name: 🗑️ Исключаемые сенсоры ("Батарея+")
      description: Сенсоры уровня заряда, которые нужно исключить из отчета. Выберите те, которые помечены как **"Батарея+"**.
      default:
        entity_id: []
      selector:
        target:
          entity:
            - domain: sensor
              device_class: battery

variables:
  mobile_device_id: !input mobile_notify_target
  telegram_notify_entities: !input telegram_notify_target 
  critical_threshold: !input critical_level
  excluded_entity_ids: !input excluded_sensors
  send_full_report: !input send_full_report_option
  full_report_days: !input full_report_days 
  trigger_days: !input trigger_days

trigger:
  - platform: time
    at: !input trigger_time

action:
  # ----------------------------------------------------------------------
  # 1. РАССЧЕТ И ГЕНЕРАЦИЯ СООБЩЕНИЙ (КРАТКИЙ И ПОЛНЫЙ)
  # ----------------------------------------------------------------------
  - alias: Рассчитать отчеты
    variables:
      threshold: "{{ critical_threshold | int }}"
      exclude_list: "{{ excluded_entity_ids.entity_id | default([]) }}"
      
      # Сообщение о незаряжаемых батареях (Замена) - КРАТКИЙ ОТЧЕТ 1
      disposable_message: >-
        {% set ns = namespace(disposable_lines=[]) %}
        {% for sensor in states.sensor %}
          {% if sensor.attributes.battery_last_reported_level is defined and sensor.entity_id not in exclude_list %}
            {% set name = sensor.attributes.friendly_name | default(sensor.entity_id) %}
            {% set numerical_level = sensor.attributes.battery_last_reported_level | float(default=-1) | int(default=-1) %}
            {% if numerical_level >= 0 and numerical_level < threshold %}
              {% set battery_type = sensor.attributes.battery_type | default('Unknown') %}
              {# Удаляем " Батарея+" из имени сенсора #}
              {% set cleaned_name = name | replace(' Батарея+', '') | trim %} 
              {% set is_rechargeable = (battery_type == 'Rechargeable' or 'F946B' in cleaned_name or 'F966B' in cleaned_name or 'privod' in cleaned_name) %}
              {% if not is_rechargeable %}
                {% set battery_quantity = sensor.attributes.battery_quantity | default('1') %}
                {% set line = cleaned_name ~ ": " ~ numerical_level ~ "% ❌ ЗАМЕНА! (Тип: " ~ battery_type ~ ", Кол-во: " ~ battery_quantity ~ ")" %}
                {% set ns.disposable_lines = ns.disposable_lines + [{ 'level': numerical_level, 'line': line }] %}
              {% endif %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {% set sorted_disposable = ns.disposable_lines | sort(attribute='level') %}
        {% set disposable_output = sorted_disposable | map(attribute='line') | list %}
        {% if disposable_output | length > 0 %}
          {{ "⚠️ Устройства, требующие замены батареи:\n" ~ disposable_output | join('\n') }}
        {% else %}
          {# ИСПРАВЛЕНИЕ v3.7.3: Убрана избыточная префикса "✅ ЗАМЕНА НЕ ТРЕБУЕТСЯ" #}
          {{ "Все незаряжаемые батареи имеют заряд выше " ~ critical_threshold ~ "%." }}
        {% endif %}

      # Сообщение о заряжаемых устройствах (Зарядка) - КРАТКИЙ ОТЧЕТ 2
      rechargeable_message: >-
        {% set ns = namespace(rechargeable_lines=[]) %}
        {% for sensor in states.sensor %}
          {% if sensor.attributes.battery_last_reported_level is defined and sensor.entity_id not in exclude_list %}
            {% set name = sensor.attributes.friendly_name | default(sensor.entity_id) %}
            {% set numerical_level = sensor.attributes.battery_last_reported_level | float(default=-1) | int(default=-1) %}
            {% if numerical_level >= 0 and numerical_level < threshold %}
              {% set battery_type = sensor.attributes.battery_type | default('Unknown') %}
              {# Удаляем " Батарея+" из имени сенсора #}
              {% set cleaned_name = name | replace(' Батарея+', '') | trim %}
              {% set is_rechargeable = (battery_type == 'Rechargeable' or 'F946B' in cleaned_name or 'F966B' in cleaned_name or 'privod' in cleaned_name) %}
              {% if is_rechargeable %}
                {% set line = cleaned_name ~ ": " ~ numerical_level ~ "% 🔌 ЗАРЯДКА!" %}
                {% set ns.rechargeable_lines = ns.rechargeable_lines + [{ 'level': numerical_level, 'line': line }] %}
              {% endif %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {% set sorted_rechargeable = ns.rechargeable_lines | sort(attribute='level') %}
        {% set rechargeable_output = sorted_rechargeable | map(attribute='line') | list %}
        {% if rechargeable_output | length > 0 %}
          {{ "⚠️ Устройства, требующие подзарядки:\n" ~ rechargeable_output | join('\n') }}
        {% else %}
          {# ИСПРАВЛЕНИЕ v3.7.3: Убрана избыточная префикса "✅ ЗАРЯДКА НЕ ТРЕБУЕТСЯ" #}
          {{ "Все заряжаемые устройства имеют заряд выше " ~ critical_threshold ~ "%." }}
        {% endif %}
      
      # ОТЧЕТ 3: ПОЛНЫЙ СПИСОК ВСЕХ БАТАРЕЙ (ТЕЛО СООБЩЕНИЯ С ДЕТАЛЯМИ)
      full_report_body_list: >-
        {% set ns = namespace(all_lines=[]) %}
        {# Фиксированные пороги для цветовых индикаторов в полном отчете (не зависят от critical_level) #}
        {% set yellow_boundary = 40 %}
        {% set red_boundary = 15 %}
        
        {% for sensor in states.sensor %}
          {% if sensor.attributes.battery_last_reported_level is defined and sensor.entity_id not in exclude_list %}
            {% set name = sensor.attributes.friendly_name | default(sensor.entity_id) %}
            {% set numerical_level = sensor.attributes.battery_last_reported_level | float(default=-1) | int(default=-1) %}
            
            {% if numerical_level >= 0 %}
              {% set battery_type = sensor.attributes.battery_type | default('Unknown') %}
              {% set cleaned_name = name | replace(' Батарея+', '') | trim %} 
              {% set is_rechargeable = (battery_type == 'Rechargeable' or 'F946B' in cleaned_name or 'F966B' in cleaned_name or 'privod' in cleaned_name) %}
              
              {# 1. ОПРЕДЕЛЕНИЕ ЦВЕТОВОГО СТАТУСА (На основе фиксированных порогов 15/40) #}
              {% set status_icon = '🟢' %} 
              {% if numerical_level < red_boundary %}
                {% set status_icon = '🔴' %} 
              {% elif numerical_level < yellow_boundary %}
                {% set status_icon = '🟡' %} 
              {% endif %}
              
              {# 2. ОПРЕДЕЛЕНИЕ ТЕКСТОВОЙ МЕТКИ АВАРИИ (На основе пользовательского critical_threshold) #}
              {% set status_label = '' %}
              {% if numerical_level < threshold %}
                {% set status_label = ' ❌ ЗАМЕНА!' if not is_rechargeable else ' 🔌 ЗАРЯДКА!' %}
              {% endif %}
              
              {# ДОБАВЛЕНИЕ ДЕТАЛЕЙ ТОЛЬКО ДЛЯ незаряжаемых #}
              {% set details = "" %}
              {% if not is_rechargeable %}
                {% set battery_quantity = sensor.attributes.battery_quantity | default('1') %}
                {% set details = " (Тип: " ~ battery_type ~ ", Кол-во: " ~ battery_quantity ~ " шт)" %}
              {% endif %}

              {% set line = status_icon ~ " " ~ cleaned_name ~ ": " ~ numerical_level ~ "%" ~ status_label ~ details %}
              {% set ns.all_lines = ns.all_lines + [{ 'level': numerical_level, 'line': line }] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {% set sorted_all = ns.all_lines | sort(attribute='level', reverse=true) %}
        {% set all_output = sorted_all | map(attribute='line') | list %}
        
        {% if all_output | length > 0 %}
          {{ all_output | join('\n') }}
        {% else %}
          Сенсоры батарей не найдены.
        {% endif %}
        
      # ОТЧЕТ 4: СВОДКА ПО ТИПУ БАТАРЕИ (Общее количество элементов)
      battery_types_summary: >-
        {% set ns = namespace(output_lines=[]) %}
        {% set all_battery_sensors = states.sensor 
            | selectattr('attributes.battery_last_reported_level', 'defined') 
            | rejectattr('entity_id', 'in', exclude_list) 
            | list %}
            
        {% set grouped_by_type = all_battery_sensors 
            | groupby('attributes.battery_type') %}
            
        {% for type, sensors in grouped_by_type %}
          {% set total_quantity = namespace(value=0) %}
          {% for sensor in sensors %}
            {# Извлекаем и преобразуем battery_quantity, по умолчанию 1 #}
            {% set quantity = sensor.attributes.battery_quantity | default('1') | int(default=1) %}
            {% set total_quantity.value = total_quantity.value + quantity %}
          {% endfor %}

          {# Замена "Rechargeable" на "Встроеный АКБ" для отображения #}
          {% set display_type = type | default('Неизвестный Тип') | string %}
          {% if display_type == 'Rechargeable' %}
            {% set display_type = 'Встроеный АКБ' %}
          {% endif %}

          {# Форматированная строка: • [Тип] (Всего: [Количество] шт) #}
          {% set line = "• " ~ display_type ~ " (Всего: " ~ total_quantity.value ~ " шт)" %}
          {% set ns.output_lines = ns.output_lines + [line] %}
        {% endfor %}
        
        {% if ns.output_lines | length > 0 %}
          {{ "--- \n\n🔋 Сводка по Типу Батареи (Общее количество элементов):\n" ~ ns.output_lines | sort | join('\n') }}
        {% else %}
          Нет данных о типах батарей для отчета.
        {% endif %}

  # ----------------------------------------------------------------------
  # 2. ОТПРАВКА ОТЧЕТА 1: НЕЗАРЯЖАЕМЫЕ (ЗАМЕНА)
  # ----------------------------------------------------------------------
  - alias: Отправить Отчет 1 - Незаряжаемые (Условно)
    choose:
      # Главное условие: Проверка дней недели для КРАТКОГО ОТЧЕТА
      - conditions:
          - condition: template
            value_template: >
              {% set selected_days = trigger_days %}
              {% if selected_days | length > 0 %}
                {{ now().strftime('%a') in selected_days }}
              {% else %}
                {{ true }}
              {% endif %}
        sequence:
          # 2.1 Мобильное приложение
          - alias: Мобильное приложение - Отчет о незаряжаемых (Условно)
            choose:
              - conditions:
                  - condition: template
                    value_template: "{{ mobile_device_id is not none and mobile_device_id != '' }}"
                sequence:
                  - service: notify.mobile_app_{{ device_attr(mobile_device_id, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                    data:
                      # Динамический заголовок для мобильного приложения
                      title: >
                        {% if disposable_message.startswith('⚠️') %}
                          🪫 ТРЕБУЕТСЯ ЗАМЕНА: Батареи, заряд < {{ critical_threshold }}%
                        {% else %}
                          ✅ ВСЕ В НОРМЕ: Замена не требуется
                        {% endif %}
                      message: "{{ disposable_message }}"
          
          # 2.2 Сервис Telegram Bot
          - alias: Telegram - Определить целевые ID чатов для Отчета 1
            variables:
              # ИЗВЛЕЧЕНИЕ ID и ДОБАВЛЕНИЕ МИНУСА ДЛЯ ДЛИННЫХ ID (ГРУПП/КАНАЛОВ)
              target_chat_ids: >-
                {% set selected_entities = telegram_notify_entities.entity_id | default([]) %}
                {% set chat_id_strings = selected_entities | map('regex_replace', find='^.+_', replace='') | list %}
                {% set ns = namespace(target_ids=[]) %}
                {% for id_string in chat_id_strings %}
                  {% set cleaned_id = id_string | string | trim %}
                  {# Если ID длинный (более 10 символов) и не начинается с минуса, добавляем минус #}
                  {% if cleaned_id | length > 10 and not cleaned_id.startswith('-') %}
                    {% set id_with_hyphen = '-' ~ cleaned_id %}
                    {% set ns.target_ids = ns.target_ids + [id_with_hyphen] %}
                  {% else %}
                    {% set ns.target_ids = ns.target_ids + [cleaned_id] %}
                  {% endif %}
                {% endfor %}
                {{ ns.target_ids }}

          - alias: Telegram - Отчет о незаряжаемых (Условно)
            choose:
              - conditions:
                  - condition: template
                    value_template: "{{ target_chat_ids | length > 0 }}" 
                sequence:
                  - service: telegram_bot.send_message
                    data:
                      target: "{{ target_chat_ids }}" # ID чатов с корректно добавленным минусом
                      message: |
                        {% set report_body = disposable_message %}
                        
                        {# Form the header with Markdown formatting #}
                        {% if report_body.startswith('⚠️') %}
                          {% set header = '🪫 *ТРЕБУЕТСЯ ЗАМЕНА:* Батареи, заряд < ' ~ critical_threshold ~ '%' %}
                        {% else %}
                          {% set header = '*✅ ВСЕ В НОРМЕ:* Замена не требуется' %}
                        {% endif %}
                        
                        {% set final_message = header ~ "\n\n" ~ report_body %}
                        
                        {# Полное экранирование спецсимволов MarkdownV2. #}
                        {% set escaped_message = final_message | replace('~', '\~') | replace('`', '\`') | replace('>', '\>') | replace('#', '\#') | replace('+', '\+') | replace('-', '\-') | replace('=', '\=') | replace('|', '\|') | replace('{', '\{') | replace('}', '\}') | replace('.', '\.') | replace('!', '\!') | replace('*', '\*') | replace('_', '\_') | replace('[', '\[') | replace(']', '\]') | replace('(', '\(') | replace(')', '\)') | replace('%', '\%') | replace('&', '\&') %}
                        
                        {# Восстанавливаем звездочки для заголовка. Предполагаем, что они используются только для выделения жирным в заголовке (2 шт). #}
                        {% set restored_bold_message = escaped_message | replace('\*', '*', 2) %}
                        
                        {{ restored_bold_message }}
                      parse_mode: markdownv2
  
  # ----------------------------------------------------------------------
  # 3. ОТПРАВКА ОТЧЕТА 2: ЗАРЯЖАЕМЫЕ (ЗАРЯДКА)
  # ----------------------------------------------------------------------
  - alias: Отправить Отчет 2 - Заряжаемые (Условно)
    choose:
      # Главное условие: Проверка дней недели для КРАТКОГО ОТЧЕТА
      - conditions:
          - condition: template
            value_template: >
              {% set selected_days = trigger_days %}
              {% if selected_days | length > 0 %}
                {{ now().strftime('%a') in selected_days }}
              {% else %}
                {{ true }}
              {% endif %}
        sequence:
          # 3.1 Мобильное приложение
          - alias: Мобильное приложение - Отчет о заряжаемых (Условно)
            choose:
              - conditions:
                  - condition: template
                    value_template: "{{ mobile_device_id is not none and mobile_device_id != '' }}"
                sequence:
                  - service: notify.mobile_app_{{ device_attr(mobile_device_id, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                    data:
                      # Динамический заголовок для мобильного приложения
                      title: >
                        {% if rechargeable_message.startswith('⚠️') %}
                          🔌 ТРЕБУЕТСЯ ЗАРЯДКА: Заряд < {{ critical_threshold }}%
                        {% else %}
                          ✅ ВСЕ В НОРМЕ: Зарядка не требуется
                        {% endif %}
                      message: "{{ rechargeable_message }}"
          
          # 3.2 Сервис Telegram Bot
          - alias: Telegram - Определить целевые ID чатов для Отчета 2
            variables:
              # ИЗВЛЕЧЕНИЕ ID и ДОБАВЛЕНИЕ МИНУСА ДЛЯ ДЛИННЫХ ID (ГРУПП/КАНАЛОВ)
              target_chat_ids: >-
                {% set selected_entities = telegram_notify_entities.entity_id | default([]) %}
                {% set chat_id_strings = selected_entities | map('regex_replace', find='^.+_', replace='') | list %}
                {% set ns = namespace(target_ids=[]) %}
                {% for id_string in chat_id_strings %}
                  {% set cleaned_id = id_string | string | trim %}
                  {% if cleaned_id | length > 10 and not cleaned_id.startswith('-') %}
                    {% set id_with_hyphen = '-' ~ cleaned_id %}
                    {% set ns.target_ids = ns.target_ids + [id_with_hyphen] %}
                  {% else %}
                    {% set ns.target_ids = ns.target_ids + [cleaned_id] %}
                  {% endif %}
                {% endfor %}
                {{ ns.target_ids }}

          - alias: Telegram - Отчет о заряжаемых (Условно)
            choose:
              - conditions:
                  - condition: template
                    value_template: "{{ target_chat_ids | length > 0 }}"
                sequence:
                  - service: telegram_bot.send_message
                    data:
                      target: "{{ target_chat_ids }}" 
                      message: |
                        {% set report_body = rechargeable_message %}
                        
                        {# Form the header with Markdown formatting #}
                        {% if report_body.startswith('⚠️') %}
                          {% set header = '🔌 *ТРЕБУЕТСЯ ЗАРЯДКА:* Заряд < ' ~ critical_threshold ~ '%' %}
                        {% else %}
                          {% set header = '*✅ ВСЕ В НОРМЕ:* Зарядка не требуется' %}
                        {% endif %}
                        
                        {% set final_message = header ~ "\n\n" ~ report_body %}
                        
                        {# Полное экранирование спецсимволов MarkdownV2. #}
                        {% set escaped_message = final_message | replace('~', '\~') | replace('`', '\`') | replace('>', '\>') | replace('#', '\#') | replace('+', '\+') | replace('-', '\-') | replace('=', '\=') | replace('|', '\|') | replace('{', '\{') | replace('}', '\}') | replace('.', '\.') | replace('!', '\!') | replace('*', '\*') | replace('_', '\_') | replace('[', '\[') | replace(']', '\]') | replace('(', '\(') | replace(')', '\)') | replace('%', '\%') | replace('&', '\&') %}
                        
                        {# Восстанавливаем звездочки для заголовка. Предполагаем, что они используются только для выделения жирным в заголовке (2 шт). #}
                        {% set restored_bold_message = escaped_message | replace('\*', '*', 2) %}
                        
                        {{ restored_bold_message }}
                      parse_mode: markdownv2
  
  # ----------------------------------------------------------------------
  # 4. ОТПРАВКА ОТЧЕТА 3: ПОЛНЫЙ СПИСОК (ОПЦИОНАЛЬНО)
  # ----------------------------------------------------------------------
  - alias: Telegram - Определить целевые ID чатов для Полного Отчета
    variables:
      # ИЗВЛЕЧЕНИЕ ID и ДОБАВЛЕНИЕ МИНУСА ДЛЯ ДЛИННЫХ ID (ГРУПП/КАНАЛОВ)
      target_chat_ids: >-
        {% set selected_entities = telegram_notify_entities.entity_id | default([]) %}
        {% set chat_id_strings = selected_entities | map('regex_replace', find='^.+_', replace='') | list %}
        {% set ns = namespace(target_ids=[]) %}
        {% for id_string in chat_id_strings %}
          {% set cleaned_id = id_string | string | trim %}
          {% if cleaned_id | length > 10 and not cleaned_id.startswith('-') %}
            {% set id_with_hyphen = '-' ~ cleaned_id %}
            {% set ns.target_ids = ns.target_ids + [id_with_hyphen] %}
          {% else %}
            {% set ns.target_ids = ns.target_ids + [cleaned_id] %}
          {% endif %}
        {% endfor %}
        {{ ns.target_ids }}
    
  - alias: Telegram - Отправить Полный отчет (Условно)
    choose:
      - conditions:
          - condition: template
            value_template: "{{ target_chat_ids | length > 0 and send_full_report }}"
          - condition: template
            value_template: >
              {% set selected_days = full_report_days %}
              {% if selected_days | length > 0 %}
                {{ now().strftime('%a') in selected_days }}
              {% else %}
                {{ true }}
              {% endif %}
        sequence:
          - variables:
              # Title for the Full report (with full escaping)
              full_report_title: "🔋 *Полный отчет по всем батареям (Отсортирован по уровню):*"
              # Add battery type summary to the message
              full_report_message: "{{ full_report_title ~ '\n\n' ~ full_report_body_list ~ '\n\n' ~ battery_types_summary }}"
            
          - service: telegram_bot.send_message
            data:
              target: "{{ target_chat_ids }}" 
              message: |
                {% set report_body = full_report_message %}
                {# Полное экранирование спецсимволов MarkdownV2. Восстанавливаем звездочки для заголовка. #}
                {% set escaped_body = report_body | replace('~', '\~') | replace('`', '\`') | replace('>', '\>') | replace('#', '\#') | replace('+', '\+') | replace('-', '\-') | replace('=', '\=') | replace('|', '\|') | replace('{', '\{') | replace('}', '\}') | replace('.', '\.') | replace('!', '\!') | replace('*', '\*') | replace('_', '\_') | replace('[', '\[') | replace(']', '\]') | replace('(', '\(') | replace(')', '\)') | replace('%', '\%') | replace('&', '\&') %}
                
                {# Восстанавливаем звездочки для заголовка. Предполагаем, что они используются только для выделения жирным в заголовке (2 шт). #}
                {% set restored_bold_message = escaped_body | replace('\*', '*', 2) %}
                
                {{ restored_bold_message }}
              parse_mode: markdownv2
    
mode: single
