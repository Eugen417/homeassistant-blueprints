blueprint:
  name: 💧 Уведомление о протечке воды по зонам с PUSH, TTS и Telegram v15
  description: >-
    Отправляет уведомления при обнаружении протечки в одной из четырёх зон. Перекрывает
    водоснабжение, отправляет PUSH-уведомление на выбранный телефон,
    воспроизводит голосовое сообщение (TTS) и отправляет уведомление в Telegram.
  domain: automation
  source_url: https://raw.githubusercontent.com/Eugen417/homeassistant-blueprints/refs/heads/new_waterleackdeteckt_tts_push_notifi.yaml
  
  input:
    zone_1_name:
      name: Название Зоны 1
      description: Укажите название для первой зоны (например, "Кухня").
      selector:
        text:
      default: 'Зона 1'
    leak_sensors_zone_1:
      name: Датчики протечки Зоны 1
      description: Выберите один или несколько датчиков протечки для первой зоны.
      selector:
        entity:
          domain: binary_sensor
          device_class: moisture
          multiple: true
      default: []
    water_shutoff_devices_zone_1:
      name: Устройства для перекрытия воды Зоны 1
      description: Выберите краны для перекрытия воды в первой зоне.
      selector:
        entity:
          domain: switch
          multiple: true
      default: []
    zone_2_name:
      name: Название Зоны 2
      description: Укажите название для второй зоны (например, "Ванная").
      selector:
        text:
      default: 'Зона 2'
    leak_sensors_zone_2:
      name: Датчики протечки Зоны 2
      description: Выберите один или несколько датчиков протечки для второй зоны.
      selector:
        entity:
          domain: binary_sensor
          device_class: moisture
          multiple: true
      default: []
    water_shutoff_devices_zone_2:
      name: Устройства для перекрытия воды Зоны 2
      description: Выберите краны для перекрытия воды во второй зоне.
      selector:
        entity:
          domain: switch
          multiple: true
      default: []
    zone_3_name:
      name: Название Зоны 3
      description: Укажите название для третьей зоны (например, "Котельная").
      selector:
        text:
      default: 'Зона 3'
    leak_sensors_zone_3:
      name: Датчики протечки Зоны 3
      description: Выберите один или несколько датчиков протечки для третьей зоны.
      selector:
        entity:
          domain: binary_sensor
          device_class: moisture
          multiple: true
      default: []
    water_shutoff_devices_zone_3:
      name: Устройства для перекрытия воды Зоны 3
      description: Выберите краны для перекрытия воды в третьей зоне.
      selector:
        entity:
          domain: switch
          multiple: true
      default: []
    zone_4_name:
      name: Название Зоны 4
      description: Укажите название для четвертой зоны.
      selector:
        text:
      default: 'Зона 4'
    leak_sensors_zone_4:
      name: Датчики протечки Зоны 4
      description: Выберите один или несколько датчиков протечки для четвертой зоны.
      selector:
        entity:
          domain: binary_sensor
          device_class: moisture
          multiple: true
      default: []
    water_shutoff_devices_zone_4:
      name: Устройства для перекрытия воды Зоны 4
      description: Выберите краны для перекрытия воды в четвертой зоне.
      selector:
        entity:
          domain: switch
          multiple: true
      default: []
    notify_device:
      name: Устройство для PUSH-уведомлений
      description: Выберите мобильное устройство для получения PUSH-уведомлений.
      selector:
        device:
          integration: mobile_app
    telegram_notify_target:
      name: Служба Telegram Notify
      description: Выберите сущность вашей службы Telegram (notify.telegram_bot_...). Оставьте пустым, если не нужно.
      default:
        entity_id: []
      selector:
        target:
          entity:
            - domain: notify
    notification_title:
      name: Заголовок PUSH-уведомления
      description: Укажите заголовок для PUSH-уведомлений.
      selector:
        text:
      default: '💧 ОБНАРУЖЕНА ПРОТЕЧКА!'
    tts_media_players:
      name: Медиаплеры для TTS
      description: Выберите медиаплеры для воспроизведения голосового сообщения.
      selector:
        entity:
          domain: media_player
          multiple: true
      default: []
    tts_service:
      name: Сервис TTS
      description: Укажите сервис для TTS, например, tts.yandex_station_say или tts.google_say.
      default: tts.yandex_station_say
      selector:
        text:
    tts_volume:
      name: Громкость TTS
      description: Установите громкость для голосового уведомления.
      selector:
        number:
          min: 0
          max: 1
          step: 0.05
          mode: slider
      default: 0.7
    tts_delay_after_leak_message:
      name: Задержка перед уведомлением о перекрытии крана (секунды)
      description: Задержка между первым голосовым сообщением о протечке и вторым о перекрытии крана.
      selector:
        number:
          min: 0
          max: 60
          step: 1
          mode: slider
      default: 8
    tts_delay_between_runs:
      name: Задержка между автоматизациями (секунды)
      description: Задержка перед началом следующей автоматизации, чтобы голосовые уведомления не накладывались.
      selector:
        number:
          min: 0
          max: 60
          step: 1
          mode: slider
      default: 4
      
variables:
  telegram_target_id: !input telegram_notify_target
  
trigger:
- platform: state
  entity_id: !input 'leak_sensors_zone_1'
  to: 'on'
  alias: Протечка в первой зоне
- platform: state
  entity_id: !input 'leak_sensors_zone_2'
  to: 'on'
  alias: Протечка во второй зоне
- platform: state
  entity_id: !input 'leak_sensors_zone_3'
  to: 'on'
  alias: Протечка в третьей зоне
- platform: state
  entity_id: !input 'leak_sensors_zone_4'
  to: 'on'
  alias: Протечка в четвертой зоне
condition:
- condition: template
  value_template: '{{ trigger.to_state.state != ''unknown'' }}'
- condition: template
  value_template: '{{ trigger.from_state.state != ''unknown'' }}'
action:
- choose:
  - conditions:
    - condition: template
      value_template: '{{ trigger.alias == ''Протечка в первой зоне'' }}'
    sequence:
    - variables:
        zone_name: !input 'zone_1_name'
        water_shutoff_devices: !input 'water_shutoff_devices_zone_1'
    - service: homeassistant.turn_off
      target:
        entity_id: '{{ water_shutoff_devices }}'
    - if: '{{ notify_device is not none }}'
      then:
      - device_id: !input 'notify_device'
        domain: mobile_app
        type: notify
        title: !input 'notification_title'
        message: '⚠️ Внимание! Обнаружена протечка воды в зоне ''{{ zone_name }}''! Датчик: {{ trigger.to_state.name | replace('' Water leak detected'', '''') }}. {% if water_shutoff_devices | length > 0 %} 🚰 Закрываю краны: {{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}.{% endif %}'
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
          sequence:
            - service: telegram_bot.send_message
              data:
                chat_id: >
                  {% set entity_id = telegram_target_id.entity_id[0] %}
                  {% set parts = entity_id.split('_') %}
                  {{ parts[-1] }}
                # 📢 Добавлен заголовок для Telegram
                title: !input 'notification_title'
                message: '⚠️ Внимание! Обнаружена протечка воды в зоне ''{{ zone_name }}''! Датчик: {{ trigger.to_state.name | replace('' Water leak detected'', '''') }}. {% if water_shutoff_devices | length > 0 %} 🚰 Закрываю краны: {{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}.{% endif %}'
                parse_mode: markdown
    - service: media_player.volume_set
      target:
        entity_id: !input 'tts_media_players'
      data:
        volume_level: !input 'tts_volume'
    - service: !input 'tts_service'
      data:
        entity_id: !input 'tts_media_players'
        message: 'Внимание! Обнаружена протечка воды в зоне {{ zone_name }} от датчика {{ trigger.to_state.name | replace('' Water leak detected'', '''') }}. {% if water_shutoff_devices | length > 0 %} Закрываю краны: {{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}.{% endif %}'
    - delay:
        seconds: !input 'tts_delay_after_leak_message'
    - choose:
      - conditions: '{{ water_shutoff_devices | select(''is_state'', ''off'') | list | length == water_shutoff_devices | length }}'
        sequence:
        - service: !input 'tts_service'
          data:
            entity_id: !input 'tts_media_players'
            message: 'Я перекрыла все краны в зоне ''{{ zone_name }}''.'
        - if: '{{ notify_device is not none }}'
          then:
          - device_id: !input 'notify_device'
            domain: mobile_app
            type: notify
            message: '✅ Я перекрыла все краны в зоне ''{{ zone_name }}''.'
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
              sequence:
                - service: telegram_bot.send_message
                  data:
                    chat_id: >
                      {% set entity_id = telegram_target_id.entity_id[0] %}
                      {% set parts = entity_id.split('_') %}
                      {{ parts[-1] }}
                    # 📢 Заголовок удален из второго сообщения
                    message: '*✅ КРАНЫ ЗАКРЫТЫ.* Я перекрыла все краны в зоне ''{{ zone_name }}''.'
                    parse_mode: markdown
      - conditions: '{{ water_shutoff_devices | select(''is_state'', ''off'') | list | length < water_shutoff_devices | length and water_shutoff_devices | select(''is_state'', ''off'') | list | length > 0 }}'
        sequence:
        - variables:
            closed_valves: '{{ expand(water_shutoff_devices) | selectattr(''state'',''eq'',''off'') | map(attribute=''name'') | list | join('', '') }}'
            failed_valves: '{{ expand(water_shutoff_devices) | selectattr(''state'',''ne'',''off'') | map(attribute=''name'') | list | join('', '') }}'
        - service: !input 'tts_service'
          data:
            entity_id: !input 'tts_media_players'
            message: 'Я не смогла закрыть краны в зоне ''{{ zone_name }}''. Закрыты краны: {{ closed_valves }}. Не закрыты: {{ failed_valves }}'
        - if: '{{ notify_device is not none }}'
          then:
          - device_id: !input 'notify_device'
            domain: mobile_app
            type: notify
            message: '🚨 Я не смогла закрыть краны в зоне ''{{ zone_name }}''. ✅ Закрыты: {{ closed_valves }}. ❌ Не закрыты: {{ failed_valves }}'
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
              sequence:
                - service: telegram_bot.send_message
                  data:
                    chat_id: >
                      {% set entity_id = telegram_target_id.entity_id[0] %}
                      {% set parts = entity_id.split('_') %}
                      {{ parts[-1] }}
                    # 📢 Заголовок удален из второго сообщения
                    message: '*🚨 ОШИБКА ЗАКРЫТИЯ КРАНОВ* в зоне ''{{ zone_name }}''. ✅ Закрыты: {{ closed_valves }}. ❌ Не закрыты: {{ failed_valves }}'
                    parse_mode: markdown
      - conditions: '{{ water_shutoff_devices | select(''is_state'', ''off'') | list | length == 0 and water_shutoff_devices | length > 0 }}'
        sequence:
        - variables:
            failed_valves: '{{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}'
        - service: !input 'tts_service'
          data:
            entity_id: !input 'tts_media_players'
            message: 'Я не смогла закрыть краны в зоне ''{{ zone_name }}''. Ни один кран не закрыт: {{ failed_valves }}'
        - if: '{{ notify_device is not none }}'
          then:
          - device_id: !input 'notify_device'
            domain: mobile_app
            type: notify
            message: '🛑 КРИТИЧЕСКАЯ ОШИБКА! Ни один кран в зоне ''{{ zone_name }}'' не закрыт: {{ failed_valves }}'
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
              sequence:
                - service: telegram_bot.send_message
                  data:
                    chat_id: >
                      {% set entity_id = telegram_target_id.entity_id[0] %}
                      {% set parts = entity_id.split('_') %}
                      {{ parts[-1] }}
                    # 📢 Заголовок удален из второго сообщения
                    message: '*🛑 КРИТИЧЕСКАЯ ОШИБКА:* НИ ОДИН КРАН в зоне ''{{ zone_name }}'' не закрыт: {{ failed_valves }}'
                    parse_mode: markdown
    - delay:
        seconds: !input 'tts_delay_between_runs'
    alias: Действия для первой зоны
  - conditions:
    - condition: template
      value_template: '{{ trigger.alias == ''Протечка во второй зоне'' }}'
    sequence:
    - variables:
        zone_name: !input 'zone_2_name'
        water_shutoff_devices: !input 'water_shutoff_devices_zone_2'
    - service: homeassistant.turn_off
      target:
        entity_id: '{{ water_shutoff_devices }}'
    - if: '{{ notify_device is not none }}'
      then:
      - device_id: !input 'notify_device'
        domain: mobile_app
        type: notify
        title: !input 'notification_title'
        message: '⚠️ Внимание! Обнаружена протечка воды в зоне ''{{ zone_name }}''! Датчик: {{ trigger.to_state.name | replace('' Water leak detected'', '''') }}. {% if water_shutoff_devices | length > 0 %} 🚰 Закрываю краны: {{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}.{% endif %}'
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
          sequence:
            - service: telegram_bot.send_message
              data:
                chat_id: >
                  {% set entity_id = telegram_target_id.entity_id[0] %}
                  {% set parts = entity_id.split('_') %}
                  {{ parts[-1] }}
                # 📢 Добавлен заголовок для Telegram
                title: !input 'notification_title'
                message: '⚠️ Внимание! Обнаружена протечка воды в зоне ''{{ zone_name }}''! Датчик: {{ trigger.to_state.name | replace('' Water leak detected'', '''') }}. {% if water_shutoff_devices | length > 0 %} 🚰 Закрываю краны: {{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}.{% endif %}'
                parse_mode: markdown
    - service: media_player.volume_set
      target:
        entity_id: !input 'tts_media_players'
      data:
        volume_level: !input 'tts_volume'
    - service: !input 'tts_service'
      data:
        entity_id: !input 'tts_media_players'
        message: 'Внимание! Обнаружена протечка воды в зоне {{ zone_name }} от датчика {{ trigger.to_state.name | replace('' Water leak detected'', '''') }}. {% if water_shutoff_devices | length > 0 %} Закрываю краны: {{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}.{% endif %}'
    - delay:
        seconds: !input 'tts_delay_after_leak_message'
    - choose:
      - conditions: '{{ water_shutoff_devices | select(''is_state'', ''off'') | list | length == water_shutoff_devices | length }}'
        sequence:
        - service: !input 'tts_service'
          data:
            entity_id: !input 'tts_media_players'
            message: 'Я перекрыла все краны в зоне ''{{ zone_name }}''.'
        - if: '{{ notify_device is not none }}'
          then:
          - device_id: !input 'notify_device'
            domain: mobile_app
            type: notify
            message: '✅ Я перекрыла все краны в зоне ''{{ zone_name }}''.'
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
              sequence:
                - service: telegram_bot.send_message
                  data:
                    chat_id: >
                      {% set entity_id = telegram_target_id.entity_id[0] %}
                      {% set parts = entity_id.split('_') %}
                      {{ parts[-1] }}
                    # 📢 Заголовок удален из второго сообщения
                    message: '*✅ КРАНЫ ЗАКРЫТЫ.* Я перекрыла все краны в зоне ''{{ zone_name }}''.'
                    parse_mode: markdown
      - conditions: '{{ water_shutoff_devices | select(''is_state'', ''off'') | list | length < water_shutoff_devices | length and water_shutoff_devices | select(''is_state'', ''off'') | list | length > 0 }}'
        sequence:
        - variables:
            closed_valves: '{{ expand(water_shutoff_devices) | selectattr(''state'',''eq'',''off'') | map(attribute=''name'') | list | join('', '') }}'
            failed_valves: '{{ expand(water_shutoff_devices) | selectattr(''state'',''ne'',''off'') | map(attribute=''name'') | list | join('', '') }}'
        - service: !input 'tts_service'
          data:
            entity_id: !input 'tts_media_players'
            message: 'Я не смогла закрыть краны в зоне ''{{ zone_name }}''. Закрыты краны: {{ closed_valves }}. Не закрыты: {{ failed_valves }}'
        - if: '{{ notify_device is not none }}'
          then:
          - device_id: !input 'notify_device'
            domain: mobile_app
            type: notify
            message: '🚨 Я не смогла закрыть краны в зоне ''{{ zone_name }}''. ✅ Закрыты: {{ closed_valves }}. ❌ Не закрыты: {{ failed_valves }}'
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
              sequence:
                - service: telegram_bot.send_message
                  data:
                    chat_id: >
                      {% set entity_id = telegram_target_id.entity_id[0] %}
                      {% set parts = entity_id.split('_') %}
                      {{ parts[-1] }}
                    # 📢 Заголовок удален из второго сообщения
                    message: '*🚨 ОШИБКА ЗАКРЫТИЯ КРАНОВ* в зоне ''{{ zone_name }}''. ✅ Закрыты: {{ closed_valves }}. ❌ Не закрыты: {{ failed_valves }}'
                    parse_mode: markdown
      - conditions: '{{ water_shutoff_devices | select(''is_state'', ''off'') | list | length == 0 and water_shutoff_devices | length > 0 }}'
        sequence:
        - variables:
            failed_valves: '{{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}'
        - service: !input 'tts_service'
          data:
            entity_id: !input 'tts_media_players'
            message: 'Я не смогла закрыть краны в зоне ''{{ zone_name }}''. Ни один кран не закрыт: {{ failed_valves }}'
        - if: '{{ notify_device is not none }}'
          then:
          - device_id: !input 'notify_device'
            domain: mobile_app
            type: notify
            message: '🛑 КРИТИЧЕСКАЯ ОШИБКА! Ни один кран в зоне ''{{ zone_name }}'' не закрыт: {{ failed_valves }}'
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
              sequence:
                - service: telegram_bot.send_message
                  data:
                    chat_id: >
                      {% set entity_id = telegram_target_id.entity_id[0] %}
                      {% set parts = entity_id.split('_') %}
                      {{ parts[-1] }}
                    # 📢 Заголовок удален из второго сообщения
                    message: '*🛑 КРИТИЧЕСКАЯ ОШИБКА:* НИ ОДИН КРАН в зоне ''{{ zone_name }}'' не закрыт: {{ failed_valves }}'
                    parse_mode: markdown
    - delay:
        seconds: !input 'tts_delay_between_runs'
    alias: Действия для второй зоны
  - conditions:
    - condition: template
      value_template: '{{ trigger.alias == ''Протечка в третьей зоне'' }}'
    sequence:
    - variables:
        zone_name: !input 'zone_3_name'
        water_shutoff_devices: !input 'water_shutoff_devices_zone_3'
    - service: homeassistant.turn_off
      target:
        entity_id: '{{ water_shutoff_devices }}'
    - if: '{{ notify_device is not none }}'
      then:
      - device_id: !input 'notify_device'
        domain: mobile_app
        type: notify
        title: !input 'notification_title'
        message: '⚠️ Внимание! Обнаружена протечка воды в зоне ''{{ zone_name }}''! Датчик: {{ trigger.to_state.name | replace('' Water leak detected'', '''') }}. {% if water_shutoff_devices | length > 0 %} 🚰 Закрываю краны: {{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}.{% endif %}'
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
          sequence:
            - service: telegram_bot.send_message
              data:
                chat_id: >
                  {% set entity_id = telegram_target_id.entity_id[0] %}
                  {% set parts = entity_id.split('_') %}
                  {{ parts[-1] }}
                # 📢 Добавлен заголовок для Telegram
                title: !input 'notification_title'
                message: '⚠️ Внимание! Обнаружена протечка воды в зоне ''{{ zone_name }}''! Датчик: {{ trigger.to_state.name | replace('' Water leak detected'', '''') }}. {% if water_shutoff_devices | length > 0 %} 🚰 Закрываю краны: {{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}.{% endif %}'
                parse_mode: markdown
    - service: media_player.volume_set
      target:
        entity_id: !input 'tts_media_players'
      data:
        volume_level: !input 'tts_volume'
    - service: !input 'tts_service'
      data:
        entity_id: !input 'tts_media_players'
        message: 'Внимание! Обнаружена протечка воды в зоне {{ zone_name }} от датчика {{ trigger.to_state.name | replace('' Water leak detected'', '''') }}. {% if water_shutoff_devices | length > 0 %} Закрываю краны: {{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}.{% endif %}'
    - delay:
        seconds: !input 'tts_delay_after_leak_message'
    - choose:
      - conditions: '{{ water_shutoff_devices | select(''is_state'', ''off'') | list | length == water_shutoff_devices | length }}'
        sequence:
        - service: !input 'tts_service'
          data:
            entity_id: !input 'tts_media_players'
            message: 'Я перекрыла все краны в зоне ''{{ zone_name }}''.'
        - if: '{{ notify_device is not none }}'
          then:
          - device_id: !input 'notify_device'
            domain: mobile_app
            type: notify
            message: '✅ Я перекрыла все краны в зоне ''{{ zone_name }}''.'
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
              sequence:
                - service: telegram_bot.send_message
                  data:
                    chat_id: >
                      {% set entity_id = telegram_target_id.entity_id[0] %}
                      {% set parts = entity_id.split('_') %}
                      {{ parts[-1] }}
                    # 📢 Заголовок удален из второго сообщения
                    message: '*✅ КРАНЫ ЗАКРЫТЫ.* Я перекрыла все краны в зоне ''{{ zone_name }}''.'
                    parse_mode: markdown
      - conditions: '{{ water_shutoff_devices | select(''is_state'', ''off'') | list | length < water_shutoff_devices | length and water_shutoff_devices | select(''is_state'', ''off'') | list | length > 0 }}'
        sequence:
        - variables:
            closed_valves: '{{ expand(water_shutoff_devices) | selectattr(''state'',''eq'',''off'') | map(attribute=''name'') | list | join('', '') }}'
            failed_valves: '{{ expand(water_shutoff_devices) | selectattr(''state'',''ne'',''off'') | map(attribute=''name'') | list | join('', '') }}'
        - service: !input 'tts_service'
          data:
            entity_id: !input 'tts_media_players'
            message: 'Я не смогла закрыть краны в зоне ''{{ zone_name }}''. Закрыты краны: {{ closed_valves }}. Не закрыты: {{ failed_valves }}'
        - if: '{{ notify_device is not none }}'
          then:
          - device_id: !input 'notify_device'
            domain: mobile_app
            type: notify
            message: '🚨 Я не смогла закрыть краны в зоне ''{{ zone_name }}''. ✅ Закрыты: {{ closed_valves }}. ❌ Не закрыты: {{ failed_valves }}'
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
              sequence:
                - service: telegram_bot.send_message
                  data:
                    chat_id: >
                      {% set entity_id = telegram_target_id.entity_id[0] %}
                      {% set parts = entity_id.split('_') %}
                      {{ parts[-1] }}
                    # 📢 Заголовок удален из второго сообщения
                    message: '*🚨 ОШИБКА ЗАКРЫТИЯ КРАНОВ* в зоне ''{{ zone_name }}''. ✅ Закрыты: {{ closed_valves }}. ❌ Не закрыты: {{ failed_valves }}'
                    parse_mode: markdown
      - conditions: '{{ water_shutoff_devices | select(''is_state'', ''off'') | list | length == 0 and water_shutoff_devices | length > 0 }}'
        sequence:
        - variables:
            failed_valves: '{{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}'
        - service: !input 'tts_service'
          data:
            entity_id: !input 'tts_media_players'
            message: 'Я не смогла закрыть краны в зоне ''{{ zone_name }}''. Ни один кран не закрыт: {{ failed_valves }}'
        - if: '{{ notify_device is not none }}'
          then:
          - device_id: !input 'notify_device'
            domain: mobile_app
            type: notify
            message: '🛑 КРИТИЧЕСКАЯ ОШИБКА! Ни один кран в зоне ''{{ zone_name }}'' не закрыт: {{ failed_valves }}'
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
              sequence:
                - service: telegram_bot.send_message
                  data:
                    chat_id: >
                      {% set entity_id = telegram_target_id.entity_id[0] %}
                      {% set parts = entity_id.split('_') %}
                      {{ parts[-1] }}
                    # 📢 Заголовок удален из второго сообщения
                    message: '*🛑 КРИТИЧЕСКАЯ ОШИБКА:* НИ ОДИН КРАН в зоне ''{{ zone_name }}'' не закрыт: {{ failed_valves }}'
                    parse_mode: markdown
    - delay:
        seconds: !input 'tts_delay_between_runs'
    alias: Действия для третьей зоны
  - conditions:
    - condition: template
      value_template: '{{ trigger.alias == ''Протечка в четвертой зоне'' }}'
    sequence:
    - variables:
        zone_name: !input 'zone_4_name'
        water_shutoff_devices: !input 'water_shutoff_devices_zone_4'
    - service: homeassistant.turn_off
      target:
        entity_id: '{{ water_shutoff_devices }}'
    - if: '{{ notify_device is not none }}'
      then:
      - device_id: !input 'notify_device'
        domain: mobile_app
        type: notify
        title: !input 'notification_title'
        message: '⚠️ Внимание! Обнаружена протечка воды в зоне ''{{ zone_name }}''! Датчик: {{ trigger.to_state.name | replace('' Water leak detected'', '''') }}. {% if water_shutoff_devices | length > 0 %} 🚰 Закрываю краны: {{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}.{% endif %}'
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
          sequence:
            - service: telegram_bot.send_message
              data:
                chat_id: >
                  {% set entity_id = telegram_target_id.entity_id[0] %}
                  {% set parts = entity_id.split('_') %}
                  {{ parts[-1] }}
                # 📢 Добавлен заголовок для Telegram
                title: !input 'notification_title'
                message: '⚠️ Внимание! Обнаружена протечка воды в зоне ''{{ zone_name }}''! Датчик: {{ trigger.to_state.name | replace('' Water leak detected'', '''') }}. {% if water_shutoff_devices | length > 0 %} 🚰 Закрываю краны: {{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}.{% endif %}'
                parse_mode: markdown
    - service: media_player.volume_set
      target:
        entity_id: !input 'tts_media_players'
      data:
        volume_level: !input 'tts_volume'
    - service: !input 'tts_service'
      data:
        entity_id: !input 'tts_media_players'
        message: 'Внимание! Обнаружена протечка воды в зоне {{ zone_name }} от датчика {{ trigger.to_state.name | replace('' Water leak detected'', '''') }}. {% if water_shutoff_devices | length > 0 %} Закрываю краны: {{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}.{% endif %}'
    - delay:
        seconds: !input 'tts_delay_after_leak_message'
    - choose:
      - conditions: '{{ water_shutoff_devices | select(''is_state'', ''off'') | list | length == water_shutoff_devices | length }}'
        sequence:
        - service: !input 'tts_service'
          data:
            entity_id: !input 'tts_media_players'
            message: 'Я перекрыла все краны в зоне ''{{ zone_name }}''.'
        - if: '{{ notify_device is not none }}'
          then:
          - device_id: !input 'notify_device'
            domain: mobile_app
            type: notify
            message: '✅ Я перекрыла все краны в зоне ''{{ zone_name }}''.'
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
              sequence:
                - service: telegram_bot.send_message
                  data:
                    chat_id: >
                      {% set entity_id = telegram_target_id.entity_id[0] %}
                      {% set parts = entity_id.split('_') %}
                      {{ parts[-1] }}
                    # 📢 Заголовок удален из второго сообщения
                    message: '*✅ КРАНЫ ЗАКРЫТЫ.* Я перекрыла все краны в зоне ''{{ zone_name }}''.'
                    parse_mode: markdown
      - conditions: '{{ water_shutoff_devices | select(''is_state'', ''off'') | list | length < water_shutoff_devices | length and water_shutoff_devices | select(''is_state'', ''off'') | list | length > 0 }}'
        sequence:
        - variables:
            closed_valves: '{{ expand(water_shutoff_devices) | selectattr(''state'',''eq'',''off'') | map(attribute=''name'') | list | join('', '') }}'
            failed_valves: '{{ expand(water_shutoff_devices) | selectattr(''state'',''ne'',''off'') | map(attribute=''name'') | list | join('', '') }}'
        - service: !input 'tts_service'
          data:
            entity_id: !input 'tts_media_players'
            message: 'Я не смогла закрыть краны в зоне ''{{ zone_name }}''. Закрыты краны: {{ closed_valves }}. Не закрыты: {{ failed_valves }}'
        - if: '{{ notify_device is not none }}'
          then:
          - device_id: !input 'notify_device'
            domain: mobile_app
            type: notify
            message: '🚨 Я не смогла закрыть краны в зоне ''{{ zone_name }}''. ✅ Закрыты: {{ closed_valves }}. ❌ Не закрыты: {{ failed_valves }}'
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
              sequence:
                - service: telegram_bot.send_message
                  data:
                    chat_id: >
                      {% set entity_id = telegram_target_id.entity_id[0] %}
                      {% set parts = entity_id.split('_') %}
                      {{ parts[-1] }}
                    # 📢 Заголовок удален из второго сообщения
                    message: '*🚨 ОШИБКА ЗАКРЫТИЯ КРАНОВ* в зоне ''{{ zone_name }}''. ✅ Закрыты: {{ closed_valves }}. ❌ Не закрыты: {{ failed_valves }}'
                    parse_mode: markdown
      - conditions: '{{ water_shutoff_devices | select(''is_state'', ''off'') | list | length == 0 and water_shutoff_devices | length > 0 }}'
        sequence:
        - variables:
            failed_valves: '{{ expand(water_shutoff_devices) | map(attribute=''name'') | list | join('', '') }}'
        - service: !input 'tts_service'
          data:
            entity_id: !input 'tts_media_players'
            message: 'Я не смогла закрыть краны в зоне ''{{ zone_name }}''. Ни один кран не закрыт: {{ failed_valves }}'
        - if: '{{ notify_device is not none }}'
          then:
          - device_id: !input 'notify_device'
            domain: mobile_app
            type: notify
            message: '🛑 КРИТИЧЕСКАЯ ОШИБКА! Ни один кран в зоне ''{{ zone_name }}'' не закрыт: {{ failed_valves }}'
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
              sequence:
                - service: telegram_bot.send_message
                  data:
                    chat_id: >
                      {% set entity_id = telegram_target_id.entity_id[0] %}
                      {% set parts = entity_id.split('_') %}
                      {{ parts[-1] }}
                    # 📢 Заголовок удален из второго сообщения
                    message: '*🛑 КРИТИЧЕСКАЯ ОШИБКА:* НИ ОДИН КРАН в зоне ''{{ zone_name }}'' не закрыт: {{ failed_valves }}'
                    parse_mode: markdown
    - delay:
        seconds: !input 'tts_delay_between_runs'
    alias: Действия для четвертой зоны
mode: queued