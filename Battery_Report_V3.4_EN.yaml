id: automation_battery_status_report_v4_7_2 

blueprint:
  name: 🪫 Battery Status Report (v4.7.2)
  description: |
    Creates two brief reports (separated into "Replacement" and "Recharge") for devices whose charge is below the critical level.
    Sends reports to a mobile device and/or Telegram at a specified time and days of the week, indicating the battery type and quantity.
    Optionally (for Telegram only), a full report on the charge status of all batteries can be sent, including the total number of batteries by type.

    **Important Requirement!** For the automation to work, you must first install and configure the **HA-Battery Notes** integration.
  domain: automation
  source_url: https://raw.githubusercontent.com/Eugen417/homeassistant-blueprints/refs/heads/main/Battery_Report_V3.4_EN.yaml

  input:
    # 1. TRIGGERS
    trigger_time:
      name: ⏰ Start Time
      description: The time for the daily check (e.g., 08:00:00).
      selector:
        time:
    trigger_days:
      name: 📅 Days of the Week for Check (SHORT REPORT)
      description: Select the days when the SHORT report should run (optional). If none are selected, it runs every day.
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: Mon
            - label: Tuesday
              value: Tue
            - label: Wednesday
              value: Wed
            - label: Thursday
              value: Thu
            - label: Friday
              value: Fri
            - label: Saturday
              value: Sat
            - label: Sunday
              value: Sun

    # 2. DEVICES AND THRESHOLDS

    mobile_notify_target:
      name: 📱 Mobile Device (Home Assistant App)
      description: Select ONE device for push notifications. Leave empty if not needed.
      default: ""
      selector:
        device:
          integration: mobile_app

    telegram_notify_target:
      name: 💬 Telegram Notification Target
      description: Select the entities of your Telegram service (notify.telegram_bot_...). Their chat IDs will be extracted automatically.
      default:
        entity_id: []
      selector:
        target:
          entity:
            - domain: notify

    send_full_report_option:
      name: 📑 Send Full Report as a second message (Telegram)?
      description: Enable to receive a complete list of all batteries.
      default: false
      selector:
        boolean:

    full_report_days:
      name: 🗓️ Days of the Week for FULL REPORT (Telegram)
      description: Select the days when the full report should be sent if the option is enabled. Leave empty for daily sending.
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: Mon
            - label: Tuesday
              value: Tue
            - label: Wednesday
              value: Wed
            - label: Thursday
              value: Thu
            - label: Friday
              value: Fri
            - label: Saturday
              value: Sat
            - label: Sunday
              value: Sun

    critical_level:
      name: 🔥 Critical Level (%)
      description: The charge level below which a device is marked as requiring RECHARGE/REPLACEMENT. Default is 15%.
      default: 15
      selector:
        number:
          min: 1
          max: 99
          step: 1
          unit_of_measurement: "%"
          mode: box

    excluded_sensors:
      name: 🗑️ Excluded Sensors ("Battery+")
      description: Charge level sensors to exclude from the report. Select those marked as **"Battery+"**.
      default:
        entity_id: []
      selector:
        target:
          entity:
            - domain: sensor
              device_class: battery

variables:
  mobile_device_id: !input mobile_notify_target
  telegram_notify_entities: !input telegram_notify_target
  critical_threshold: !input critical_level
  excluded_entity_ids: !input excluded_sensors
  send_full_report: !input send_full_report_option
  full_report_days: !input full_report_days
  trigger_days: !input trigger_days

trigger:
  - platform: time
    at: !input trigger_time

action:
  # ----------------------------------------------------------------------
  # 1. CALCULATE AND GENERATE MESSAGES (SHORT AND FULL)
  # ----------------------------------------------------------------------
  - alias: Calculate Reports
    variables:
      threshold: "{{ critical_threshold | int }}"
      exclude_list: "{{ excluded_entity_ids.entity_id | default([]) }}"

      # Message for non-rechargeable batteries (Replacement) - SHORT REPORT 1
      disposable_message: >-
        {% set ns = namespace(disposable_lines=[]) %}
        {% for sensor in states.sensor %}
          {% if sensor.attributes.battery_last_reported_level is defined and sensor.entity_id not in exclude_list %}
            {% set name = sensor.attributes.friendly_name | default(sensor.entity_id) %}
            {% set numerical_level = sensor.attributes.battery_last_reported_level | float(default=-1) | int(default=-1) %}
            {% if numerical_level >= 0 and numerical_level < threshold %}
              {% set battery_type = sensor.attributes.battery_type | default('Unknown') %}
              {# Remove " Battery+" from the sensor name #}
              {% set cleaned_name = name | replace(' Battery+', '') | trim %}
              {# Rely solely on 'Rechargeable' attribute from HA-Battery Notes #}
              {% set is_rechargeable = (battery_type == 'Rechargeable') %}
              {% if not is_rechargeable %}
                {% set battery_quantity = sensor.attributes.battery_quantity | default('1') %}
                {% set line = cleaned_name ~ ": " ~ numerical_level ~ "% ❌ REPLACEMENT! (Type: " ~ battery_type ~ ", Qty: " ~ battery_quantity ~ ")" %}
                {% set ns.disposable_lines = ns.disposable_lines + [{ 'level': numerical_level, 'line': line }] %}
              {% endif %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {% set sorted_disposable = ns.disposable_lines | sort(attribute='level') %}
        {% set disposable_output = sorted_disposable | map(attribute='line') | list %}
        {% if disposable_output | length > 0 %}
          {{ "⚠️ Devices requiring battery replacement:\n" ~ disposable_output | join('\n') }}
        {% else %}
          ✅ All non-rechargeable batteries are above {{ critical_threshold }}%.
        {% endif %}

      # Message for rechargeable devices (Recharge) - SHORT REPORT 2
      rechargeable_message: >-
        {% set ns = namespace(rechargeable_lines=[]) %}
        {% for sensor in states.sensor %}
          {% if sensor.attributes.battery_last_reported_level is defined and sensor.entity_id not in exclude_list %}
            {% set name = sensor.attributes.friendly_name | default(sensor.entity_id) %}
            {% set numerical_level = sensor.attributes.battery_last_reported_level | float(default=-1) | int(default=-1) %}
            {% if numerical_level >= 0 and numerical_level < threshold %}
              {% set battery_type = sensor.attributes.battery_type | default('Unknown') %}
              {# Remove " Battery+" from the sensor name #}
              {% set cleaned_name = name | replace(' Battery+', '') | trim %}
              {# Rely solely on 'Rechargeable' attribute from HA-Battery Notes #}
              {% set is_rechargeable = (battery_type == 'Rechargeable') %}
              {% if is_rechargeable %}
                {% set line = cleaned_name ~ ": " ~ numerical_level ~ "% 🔌 RECHARGE!" %}
                {% set ns.rechargeable_lines = ns.rechargeable_lines + [{ 'level': numerical_level, 'line': line }] %}
              {% endif %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {% set sorted_rechargeable = ns.rechargeable_lines | sort(attribute='level') %}
        {% set rechargeable_output = sorted_rechargeable | map(attribute='line') | list %}
        {% if rechargeable_output | length > 0 %}
          {{ "⚠️ Devices requiring a recharge:\n" ~ rechargeable_output | join('\n') }}
        {% else %}
          ✅ All rechargeable devices are above {{ critical_threshold }}%.
        {% endif %}

      # REPORT 3: FULL LIST OF ALL BATTERIES (MESSAGE BODY WITH DETAILS)
      full_report_body_list: >-
        {% set ns = namespace(all_lines=[]) %}
        {# Fixed thresholds for color indicators in the full report (do not depend on critical_level) #}
        {% set yellow_boundary = 40 %}
        {% set red_boundary = 15 %}

        {% for sensor in states.sensor %}
          {% if sensor.attributes.battery_last_reported_level is defined and sensor.entity_id not in exclude_list %}
            {% set name = sensor.attributes.friendly_name | default(sensor.entity_id) %}
            {% set numerical_level = sensor.attributes.battery_last_reported_level | float(default=-1) | int(default=-1) %}

            {% if numerical_level >= 0 %}
              {% set battery_type = sensor.attributes.battery_type | default('Unknown') %}
              {% set cleaned_name = name | replace(' Battery+', '') | trim %}
              {# Rely solely on 'Rechargeable' attribute from HA-Battery Notes #}
              {% set is_rechargeable = (battery_type == 'Rechargeable') %}

              {# 1. DETERMINE COLOR STATUS (Based on fixed thresholds 15/40) #}
              {% set status_icon = '🟢' %}
              {% if numerical_level < red_boundary %}
                {% set status_icon = '🔴' %}
              {% elif numerical_level < yellow_boundary %}
                {% set status_icon = '🟡' %}
              {% endif %}

              {# 2. DETERMINE TEXT FAILURE LABEL (Based on user-defined critical_threshold) #}
              {% set status_label = '' %}
              {% if numerical_level < threshold %}
                {% set status_label = ' ❌ REPLACEMENT!' if not is_rechargeable else ' 🔌 RECHARGE!' %}
              {% endif %}

              {# ADD DETAILS ONLY FOR non-rechargeables #}
              {% set details = "" %}
              {% if not is_rechargeable %}
                {% set battery_quantity = sensor.attributes.battery_quantity | default('1') %}
                {% set details = " (Type: " ~ battery_type ~ ", Qty: " ~ battery_quantity ~ ")" %}
              {% endif %}

              {% set line = status_icon ~ " " ~ cleaned_name ~ ": " ~ numerical_level ~ "%" ~ status_label ~ details %}
              {% set ns.all_lines = ns.all_lines + [{ 'level': numerical_level, 'line': line }] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {% set sorted_all = ns.all_lines | sort(attribute='level', reverse=true) %}
        {% set all_output = sorted_all | map(attribute='line') | list %}

        {% if all_output | length > 0 %}
          {{ all_output | join('\n') }}
        {% else %}
          ❌ Battery sensors not found.
        {% endif %}

      # REPORT 4: SUMMARY BY BATTERY TYPE (Total number of elements)
      battery_types_summary: >-
        {% set ns = namespace(output_lines=[]) %}
        {% set all_battery_sensors = states.sensor
            | selectattr('attributes.battery_last_reported_level', 'defined')
            | rejectattr('entity_id', 'in', exclude_list)
            | list %}

        {% set grouped_by_type = all_battery_sensors
            | groupby('attributes.battery_type') %}

        {% for type, sensors in grouped_by_type %}
          {% set total_quantity = namespace(value=0) %}
          {% for sensor in sensors %}
            {# Extract and convert battery_quantity, default is 1 #}
            {% set quantity = sensor.attributes.battery_quantity | default('1') | int(default=1) %}
            {% set total_quantity.value = total_quantity.value + quantity %}
          {% endfor %}

          {# Replace "Rechargeable" with "Built-in Battery" for display #}
          {% set display_type = type | default('Unknown Type') | string %}
          {% if display_type == 'Rechargeable' %}
            {% set display_type = 'Built-in Battery' %}
          {% endif %}

          {# Formatted string: • [Type] (Total: [Quantity] pcs) #}
          {% set line = "• " ~ display_type ~ " (Total: " ~ total_quantity.value ~ " pcs)" %}
          {% set ns.output_lines = ns.output_lines + [line] %}
        {% endfor %}

        {% if ns.output_lines | length > 0 %}
          {{ "--- \n\n🔋 Summary by Battery Type (Total number of elements):\n" ~ ns.output_lines | sort | join('\n') }}
        {% else %}
          No battery type data for the report.
        {% endif %}

  # ----------------------------------------------------------------------
  # 2. SEND REPORT 1: NON-RECHARGEABLE (REPLACEMENT)
  # ----------------------------------------------------------------------
  - alias: Send Report 1 - Non-Rechargeable (Conditional)
    choose:
      # Main condition: Check days of the week for the SHORT REPORT
      - conditions:
          - condition: template
            value_template: >
              {% set selected_days = trigger_days %}
              {% if selected_days | length > 0 %}
                {{ now().strftime('%a') in selected_days }}
              {% else %}
                {{ true }}
              {% endif %}
        sequence:
          # 2.1 Mobile Application
          - alias: Mobile Application - Non-Rechargeable Report (Conditional)
            choose:
              - conditions:
                  - condition: template
                    value_template: "{{ mobile_device_id is not none and mobile_device_id != '' }}"
                sequence:
                  - service: notify.mobile_app_{{ device_attr(mobile_device_id, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                    data:
                      title: "🪫 REPLACEMENT REQUIRED: Batteries, charge < {{ critical_threshold }}%"
                      message: "{{ disposable_message }}"

          # 2.2 Telegram Bot Service
          - alias: Telegram - Determine target Chat IDs for Report 1
            variables:
              # EXTRACT ID and ADD HYPHEN FOR LONG IDs (GROUPS/CHANNELS)
              target_chat_ids: >-
                {% set selected_entities = telegram_notify_entities.entity_id | default([]) %}
                {% set chat_id_strings = selected_entities | map('regex_replace', find='^.+_', replace='') | list %}
                {% set ns = namespace(target_ids=[]) %}
                {% for id_string in chat_id_strings %}
                  {% set cleaned_id = id_string | string | trim %}
                  {# If ID is long (more than 10 chars) and doesn't start with a hyphen, add a hyphen #}
                  {% if cleaned_id | length > 10 and not cleaned_id.startswith('-') %}
                    {% set id_with_hyphen = '-' ~ cleaned_id %}
                    {% set ns.target_ids = ns.target_ids + [id_with_hyphen] %}
                  {% else %}
                    {% set ns.target_ids = ns.target_ids + [cleaned_id] %}
                  {% endif %}
                {% endfor %}
                {{ ns.target_ids }}

          - alias: Telegram - Non-Rechargeable Report (Conditional)
            choose:
              - conditions:
                  - condition: template
                    # Only check for target chats remains.
                    value_template: "{{ target_chat_ids | length > 0 }}"
                sequence:
                  - service: telegram_bot.send_message
                    data:
                      target: "{{ target_chat_ids }}" # Chat IDs with correctly added hyphen
                      message: |
                        {% set report_body = disposable_message %}
                        {% set header = "🪫 REPLACEMENT REQUIRED: Batteries, charge < " ~ critical_threshold ~ "%" %}

                        {# Full escaping of MarkdownV2 special characters #}
                        {% set escaped_body = report_body | replace('~', '\~') | replace('`', '\`') | replace('>', '\>') | replace('#', '\#') | replace('+', '\+') | replace('-', '\-') | replace('=', '\=') | replace('|', '\|') | replace('{', '\{') | replace('}', '\}') | replace('.', '\.') | replace('!', '\!') | replace('*', '\*') | replace('_', '\_') | replace('[', '\[') | replace(']', '\]') | replace('(', '\(') | replace(')', '\)') | replace('%', '\%') | replace('&', '\&') %}
                        {{ header ~ "\n\n" ~ escaped_body }}
                      parse_mode: markdownv2

  # ----------------------------------------------------------------------
  # 3. SEND REPORT 2: RECHARGEABLE (RECHARGE)
  # ----------------------------------------------------------------------
  - alias: Send Report 2 - Rechargeable (Conditional)
    choose:
      # Main condition: Check days of the week for the SHORT REPORT
      - conditions:
          - condition: template
            value_template: >
              {% set selected_days = trigger_days %}
              {% if selected_days | length > 0 %}
                {{ now().strftime('%a') in selected_days }}
              {% else %}
                {{ true }}
              {% endif %}
        sequence:
          # 3.1 Mobile Application
          - alias: Mobile Application - Rechargeable Report (Conditional)
            choose:
              - conditions:
                  - condition: template
                    value_template: "{{ mobile_device_id is not none and mobile_device_id != '' }}"
                sequence:
                  - service: notify.mobile_app_{{ device_attr(mobile_device_id, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                    data:
                      title: "🔌 RECHARGE REQUIRED: Charge < {{ critical_threshold }}%"
                      message: "{{ rechargeable_message }}"

          # 3.2 Telegram Bot Service
          - alias: Telegram - Determine target Chat IDs for Report 2
            variables:
              # EXTRACT ID and ADD HYPHEN FOR LONG IDs (GROUPS/CHANNELS)
              target_chat_ids: >-
                {% set selected_entities = telegram_notify_entities.entity_id | default([]) %}
                {% set chat_id_strings = selected_entities | map('regex_replace', find='^.+_', replace='') | list %}
                {% set ns = namespace(target_ids=[]) %}
                {% for id_string in chat_id_strings %}
                  {% set cleaned_id = id_string | string | trim %}
                  {% if cleaned_id | length > 10 and not cleaned_id.startswith('-') %}
                    {% set id_with_hyphen = '-' ~ cleaned_id %}
                    {% set ns.target_ids = ns.target_ids + [id_with_hyphen] %}
                  {% else %}
                    {% set ns.target_ids = ns.target_ids + [cleaned_id] %}
                  {% endif %}
                {% endfor %}
                {{ ns.target_ids }}

          - alias: Telegram - Rechargeable Report (Conditional)
            choose:
              - conditions:
                  - condition: template
                    # Only check for target chats remains.
                    value_template: "{{ target_chat_ids | length > 0 }}"
                sequence:
                  - service: telegram_bot.send_message
                    data:
                      target: "{{ target_chat_ids }}"
                      message: |
                        {% set report_body = rechargeable_message %}
                        {% set header = "🔌 RECHARGE REQUIRED: Charge < " ~ critical_threshold ~ "%" %}

                        {# Full escaping of MarkdownV2 special characters #}
                        {% set escaped_body = report_body | replace('~', '\~') | replace('`', '\`') | replace('>', '\>') | replace('#', '\#') | replace('+', '\+') | replace('-', '\-') | replace('=', '\=') | replace('|', '\|') | replace('{', '\{') | replace('}', '\}') | replace('.', '\.') | replace('!', '\!') | replace('*', '\*') | replace('_', '\_') | replace('[', '\[') | replace(']', '\]') | replace('(', '\(') | replace(')', '\)') | replace('%', '\%') | replace('&', '\&') %}
                        {{ header ~ "\n\n" ~ escaped_body }}
                      parse_mode: markdownv2

  # ----------------------------------------------------------------------
  # 4. SEND REPORT 3: FULL LIST (OPTIONAL)
  # ----------------------------------------------------------------------
  - alias: Telegram - Determine target Chat IDs for Full Report
    variables:
      # EXTRACT ID and ADD HYPHEN FOR LONG IDs (GROUPS/CHANNELS)
      target_chat_ids: >-
        {% set selected_entities = telegram_notify_entities.entity_id | default([]) %}
        {% set chat_id_strings = selected_entities | map('regex_replace', find='^.+_', replace='') | list %}
        {% set ns = namespace(target_ids=[]) %}
        {% for id_string in chat_id_strings %}
          {% set cleaned_id = id_string | string | trim %}
          {% if cleaned_id | length > 10 and not cleaned_id.startswith('-') %}
            {% set id_with_hyphen = '-' ~ cleaned_id %}
            {% set ns.target_ids = ns.target_ids + [id_with_hyphen] %}
          {% else %}
            {% set ns.target_ids = ns.target_ids + [cleaned_id] %}
          {% endif %}
        {% endfor %}
        {{ ns.target_ids }}

  - alias: Telegram - Send Full Report (Conditional)
    choose:
      - conditions:
          - condition: template
            # Only check for target chats and option remains.
            value_template: "{{ target_chat_ids | length > 0 and send_full_report }}"
          - condition: template
            # Check days of the week for the FULL REPORT
            value_template: >
              {% set selected_days = full_report_days %}
              {% if selected_days | length > 0 %}
                {{ now().strftime('%a') in selected_days }}
              {% else %}
                {{ true }}
              {% endif %}
        sequence:
          - variables:
              # Title for Full Report (with full escaping)
              full_report_title: "🔋 Full Report for all Batteries (Sorted by Level):"
              # Add summary by battery type to the message
              full_report_message: "{{ full_report_title ~ '\n\n' ~ full_report_body_list ~ '\n\n' ~ battery_types_summary }}"

          - service: telegram_bot.send_message
            data:
              target: "{{ target_chat_ids }}"
              message: |
                {% set report_body = full_report_message %}
                {# Full escaping of MarkdownV2 special characters #}
                {% set escaped_body = report_body | replace('~', '\~') | replace('`', '\`') | replace('>', '\>') | replace('#', '\#') | replace('+', '\+') | replace('-', '\-') | replace('=', '\=') | replace('|', '\|') | replace('{', '\{') | replace('}', '\}') | replace('.', '\.') | replace('!', '\!') | replace('*', '\*') | replace('_', '\_') | replace('[', '\[') | replace(']', '\]') | replace('(', '\(') | replace(')', '\)') | replace('%', '\%') | replace('&', '\&') %}
                {{ escaped_body }}
              parse_mode: markdownv2

mode: single
