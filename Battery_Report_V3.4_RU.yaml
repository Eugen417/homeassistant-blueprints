blueprint:
  name: ü™´ –û—Ç—á–µ—Ç –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –±–∞—Ç–∞—Ä–µ–π (v3.5)
  description: |
    –°–æ–∑–¥–∞–µ—Ç –¥–≤–∞ –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç—á–µ—Ç–∞ (—Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ "–ó–∞–º–µ–Ω–∞" –∏ "–ó–∞—Ä—è–¥–∫–∞") –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º, –∑–∞—Ä—è–¥ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∏–∂–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è. 
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏/–∏–ª–∏ –≤ Telegram –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è. 
    –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è Telegram) –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞—Ä—è–¥–∞ –≤—Å–µ—Ö –±–∞—Ç–∞—Ä–µ–π –∏ —É–∫–∞–∑–∞–Ω–∏–µ–º –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞—Ç–∞—Ä–µ–π –ø–æ —Ç–∏–ø—É.
    
    **–í–∞–∂–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ!** –î–ª—è —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é **HA-Battery Notes**.
  domain: automation
  source_url: https://raw.githubusercontent.com/Eugen417/homeassistant-blueprints/refs/heads/main/Battery_Report_V3.4_RU.yaml
  
  input:
    # 1. –¢–†–ò–ì–ì–ï–†–´
    trigger_time:
      name: –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
      description: –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00:00).
      selector:
        time:
    trigger_days:
      name: –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢)
      description: –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏, –∫–æ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ö–†–ê–¢–ö–ò–ô –æ—Ç—á–µ—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
              value: Mon
            - label: –í—Ç–æ—Ä–Ω–∏–∫
              value: Tue
            - label: –°—Ä–µ–¥–∞
              value: Wed
            - label: –ß–µ—Ç–≤–µ—Ä–≥
              value: Thu
            - label: –ü—è—Ç–Ω–∏—Ü–∞
              value: Fri
            - label: –°—É–±–±–æ—Ç–∞
              value: Sat
            - label: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
              value: Sun

    # 2. –£–°–¢–†–û–ô–°–¢–í–ê –ò –ü–û–†–û–ì–ò
    
    mobile_notify_target:
      name: –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Home Assistant)
      description: –í—ã–±–µ—Ä–∏—Ç–µ –û–î–ù–û —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ.
      default: ""
      selector:
        device:
          integration: mobile_app

    telegram_notify_target:
      name: –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram
      description: –í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ Telegram (notify.telegram_bot_...).
      default:
        entity_id: []
      selector:
        target:
          entity:
            - domain: notify

    send_full_report_option:
      name: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤—Ç–æ—Ä—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (Telegram)?
      description: –í–∫–ª—é—á–∏—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –±–∞—Ç–∞—Ä–µ–π.
      default: false
      selector:
        boolean:

    full_report_days:
      name: –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ü–û–õ–ù–û–ì–û –û–¢–ß–ï–¢–ê (Telegram)
      description: –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏, –∫–æ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ –æ–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞. –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
              value: Mon
            - label: –í—Ç–æ—Ä–Ω–∏–∫
              value: Tue
            - label: –°—Ä–µ–¥–∞
              value: Wed
            - label: –ß–µ—Ç–≤–µ—Ä–≥
              value: Thu
            - label: –ü—è—Ç–Ω–∏—Ü–∞
              value: Fri
            - label: –°—É–±–±–æ—Ç–∞
              value: Sat
            - label: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
              value: Sun
    
    critical_level:
      name: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (%)
      description: –£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–µ–µ –ó–ê–†–Ø–î–ö–ò/–ó–ê–ú–ï–ù–´. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 15%.
      default: 15
      selector:
        number:
          min: 1
          max: 99
          step: 1
          unit_of_measurement: "%"
          mode: box
          
    excluded_sensors:
      name: –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Å–µ–Ω—Å–æ—Ä—ã ("–ë–∞—Ç–∞—Ä–µ—è+")
      description: –°–µ–Ω—Å–æ—Ä—ã —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –æ—Ç—á–µ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ **"–ë–∞—Ç–∞—Ä–µ—è+"**.
      default:
        entity_id: []
      selector:
        target:
          entity:
            - domain: sensor
              device_class: battery

variables:
  mobile_device_id: !input mobile_notify_target
  telegram_target_id: !input telegram_notify_target 
  critical_threshold: !input critical_level
  excluded_entity_ids: !input excluded_sensors
  send_full_report: !input send_full_report_option
  full_report_days: !input full_report_days 
  trigger_days: !input trigger_days

trigger:
  - platform: time
    at: !input trigger_time

action:
  # ----------------------------------------------------------------------
  # 1. –†–ê–°–°–ß–ï–¢ –ò –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô (–ö–†–ê–¢–ö–ò–ô –ò –ü–û–õ–ù–´–ô)
  #    –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞.
  # ----------------------------------------------------------------------
  - alias: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Ç—á–µ—Ç—ã
    variables:
      threshold: "{{ critical_threshold | int }}"
      exclude_list: "{{ excluded_entity_ids.entity_id | default([]) }}"
      
      # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∑–∞—Ä—è–∂–∞–µ–º—ã—Ö –±–∞—Ç–∞—Ä–µ—è—Ö (–ó–∞–º–µ–Ω–∞) - –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ 1
      disposable_message: >-
        {% set ns = namespace(disposable_lines=[]) %}
        {% for sensor in states.sensor %}
          {% if sensor.attributes.battery_last_reported_level is defined and sensor.entity_id not in exclude_list %}
            {% set name = sensor.attributes.friendly_name | default(sensor.entity_id) %}
            {% set numerical_level = sensor.attributes.battery_last_reported_level | float(default=-1) | int(default=-1) %}
            {% if numerical_level >= 0 and numerical_level < threshold %}
              {% set battery_type = sensor.attributes.battery_type | default('Unknown') %}
              {# –£–¥–∞–ª—è–µ–º " –ë–∞—Ç–∞—Ä–µ—è+" –∏–∑ –∏–º–µ–Ω–∏ —Å–µ–Ω—Å–æ—Ä–∞ #}
              {% set cleaned_name = name | replace(' –ë–∞—Ç–∞—Ä–µ—è+', '') | trim %} 
              {% set is_rechargeable = (battery_type == 'Rechargeable' or 'F946B' in cleaned_name or 'F966B' in cleaned_name or 'privod' in cleaned_name) %}
              {% if not is_rechargeable %}
                {% set battery_quantity = sensor.attributes.battery_quantity | default('1') %}
                {% set line = cleaned_name ~ ": " ~ numerical_level ~ "% ‚ùå –ó–ê–ú–ï–ù–ê! (–¢–∏–ø: " ~ battery_type ~ ", –ö–æ–ª-–≤–æ: " ~ battery_quantity ~ ")" %}
                {% set ns.disposable_lines = ns.disposable_lines + [{ 'level': numerical_level, 'line': line }] %}
              {% endif %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {% set sorted_disposable = ns.disposable_lines | sort(attribute='level') %}
        {% set disposable_output = sorted_disposable | map(attribute='line') | list %}
        {% if disposable_output | length > 0 %}
          {{ "‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Ç—Ä–µ–±—É—é—â–∏–µ –∑–∞–º–µ–Ω—ã –±–∞—Ç–∞—Ä–µ–∏:\n" ~ disposable_output | join('\n') }}
        {% else %}
          ‚úÖ –í—Å–µ –Ω–µ–∑–∞—Ä—è–∂–∞–µ–º—ã–µ –±–∞—Ç–∞—Ä–µ–∏ –≤—ã—à–µ {{ critical_threshold }}%.
        {% endif %}

      # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—Ä—è–∂–∞–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö (–ó–∞—Ä—è–¥–∫–∞) - –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ 2
      rechargeable_message: >-
        {% set ns = namespace(rechargeable_lines=[]) %}
        {% for sensor in states.sensor %}
          {% if sensor.attributes.battery_last_reported_level is defined and sensor.entity_id not in exclude_list %}
            {% set name = sensor.attributes.friendly_name | default(sensor.entity_id) %}
            {% set numerical_level = sensor.attributes.battery_last_reported_level | float(default=-1) | int(default=-1) %}
            {% if numerical_level >= 0 and numerical_level < threshold %}
              {% set battery_type = sensor.attributes.battery_type | default('Unknown') %}
              {# –£–¥–∞–ª—è–µ–º " –ë–∞—Ç–∞—Ä–µ—è+" –∏–∑ –∏–º–µ–Ω–∏ —Å–µ–Ω—Å–æ—Ä–∞ #}
              {% set cleaned_name = name | replace(' –ë–∞—Ç–∞—Ä–µ—è+', '') | trim %}
              {% set is_rechargeable = (battery_type == 'Rechargeable' or 'F946B' in cleaned_name or 'F966B' in cleaned_name or 'privod' in cleaned_name) %}
              {% if is_rechargeable %}
                {% set line = cleaned_name ~ ": " ~ numerical_level ~ "% üîå –ó–ê–†–Ø–î–ö–ê!" %}
                {% set ns.rechargeable_lines = ns.rechargeable_lines + [{ 'level': numerical_level, 'line': line }] %}
              {% endif %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {% set sorted_rechargeable = ns.rechargeable_lines | sort(attribute='level') %}
        {% set rechargeable_output = sorted_rechargeable | map(attribute='line') | list %}
        {% if rechargeable_output | length > 0 %}
          {{ "‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥–∑–∞—Ä—è–¥–∫–∏:\n" ~ rechargeable_output | join('\n') }}
        {% else %}
          ‚úÖ –í—Å–µ –∑–∞—Ä—è–∂–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã—à–µ {{ critical_threshold }}%.
        {% endif %}
      
      # –û–¢–ß–ï–¢ 3: –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –í–°–ï–• –ë–ê–¢–ê–†–ï–ô (–¢–ï–õ–û –°–û–û–ë–©–ï–ù–ò–Ø –° –î–ï–¢–ê–õ–Ø–ú–ò)
      full_report_body_list: >-
        {% set ns = namespace(all_lines=[]) %}
        {% for sensor in states.sensor %}
          {% if sensor.attributes.battery_last_reported_level is defined and sensor.entity_id not in exclude_list %}
            {% set name = sensor.attributes.friendly_name | default(sensor.entity_id) %}
            {% set numerical_level = sensor.attributes.battery_last_reported_level | float(default=-1) | int(default=-1) %}
            
            {% if numerical_level >= 0 %}
              {% set battery_type = sensor.attributes.battery_type | default('Unknown') %}
              {% set cleaned_name = name | replace(' –ë–∞—Ç–∞—Ä–µ—è+', '') | trim %} 
              {% set is_rechargeable = (battery_type == 'Rechargeable' or 'F946B' in cleaned_name or 'F966B' in cleaned_name or 'privod' in cleaned_name) %}
              
              {% if numerical_level < threshold %}
                {% set status_icon = 'üî¥' %}
                {% set status_label = '‚ùå –ó–ê–ú–ï–ù–ê!' if not is_rechargeable else 'üîå –ó–ê–†–Ø–î–ö–ê!' %}
              {% else %}
                {% set status_icon = 'üü¢' %}
                {% set status_label = '' %} 
              {% endif %}
              
              {# –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–ï–¢–ê–õ–ï–ô –¢–û–õ–¨–ö–û –î–õ–Ø –Ω–µ–∑–∞—Ä—è–∂–∞–µ–º—ã—Ö #}
              {% set details = "" %}
              {% if not is_rechargeable %}
                {% set battery_quantity = sensor.attributes.battery_quantity | default('1') %}
                {% set details = " (–¢–∏–ø: " ~ battery_type ~ ", –ö–æ–ª-–≤–æ: " ~ battery_quantity ~ ")" %}
              {% endif %}

              {% set line = status_icon ~ " " ~ cleaned_name ~ ": " ~ numerical_level ~ "%" ~ status_label ~ details %}
              {% set ns.all_lines = ns.all_lines + [{ 'level': numerical_level, 'line': line }] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {% set sorted_all = ns.all_lines | sort(attribute='level', reverse=true) %}
        {% set all_output = sorted_all | map(attribute='line') | list %}
        
        {% if all_output | length > 0 %}
          {{ all_output | join('\n') }}
        {% else %}
          –°–µ–Ω—Å–æ—Ä—ã –±–∞—Ç–∞—Ä–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
        {% endif %}
        
      # –û–¢–ß–ï–¢ 4: –°–í–û–î–ö–ê –ü–û –¢–ò–ü–£ –ë–ê–¢–ê–†–ï–ò (–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
      battery_types_summary: >-
        {% set ns = namespace(output_lines=[]) %}
        {% set all_battery_sensors = states.sensor 
            | selectattr('attributes.battery_last_reported_level', 'defined') 
            | rejectattr('entity_id', 'in', exclude_list) 
            | list %}
            
        {% set grouped_by_type = all_battery_sensors 
            | groupby('attributes.battery_type') %}
            
        {% for type, sensors in grouped_by_type %}
          {% set total_quantity = namespace(value=0) %}
          {% for sensor in sensors %}
            {# –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º battery_quantity, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 #}
            {% set quantity = sensor.attributes.battery_quantity | default('1') | int(default=1) %}
            {% set total_quantity.value = total_quantity.value + quantity %}
          {% endfor %}

          {# –ó–∞–º–µ–Ω–∞ "Rechargeable" –Ω–∞ "–í—Å—Ç—Ä–æ–µ–Ω—ã–π –ê–ö–ë" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è #}
          {% set display_type = type | default('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¢–∏–ø') | string %}
          {% if display_type == 'Rechargeable' %}
            {% set display_type = '–í—Å—Ç—Ä–æ–µ–Ω—ã–π –ê–ö–ë' %}
          {% endif %}

          {# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: ‚Ä¢ [–¢–∏–ø] (–í—Å–µ–≥–æ: [–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ] —à—Ç) #}
          {% set line = "‚Ä¢ " ~ display_type ~ " (–í—Å–µ–≥–æ: " ~ total_quantity.value ~ " —à—Ç)" %}
          {% set ns.output_lines = ns.output_lines + [line] %}
        {% endfor %}
        
        {% if ns.output_lines | length > 0 %}
          {{ "--- \n\nüîã –°–≤–æ–¥–∫–∞ –ø–æ –¢–∏–ø—É –ë–∞—Ç–∞—Ä–µ–∏ (–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤):\n" ~ ns.output_lines | sort | join('\n') }}
        {% else %}
          –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∏–ø–∞—Ö –±–∞—Ç–∞—Ä–µ–π –¥–ª—è –æ—Ç—á–µ—Ç–∞.
        {% endif %}

  # ----------------------------------------------------------------------
  # 2. –û–¢–ü–†–ê–í–ö–ê –û–¢–ß–ï–¢–ê 1: –ù–ï–ó–ê–†–Ø–ñ–ê–ï–ú–´–ï (–ó–ê–ú–ï–ù–ê)
  #    –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω–µ–π –¥–ª—è –ö–†–ê–¢–ö–û–ì–û –û–¢–ß–ï–¢–ê.
  # ----------------------------------------------------------------------
  - alias: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –û—Ç—á–µ—Ç 1 - –ù–µ–∑–∞—Ä—è–∂–∞–µ–º—ã–µ (–£—Å–ª–æ–≤–Ω–æ)
    choose:
      # –ì–ª–∞–≤–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ö–†–ê–¢–ö–û–ì–û –û–¢–ß–ï–¢–ê
      - conditions:
          - condition: template
            value_template: >
              {% set selected_days = trigger_days %}
              {% if selected_days | length > 0 %}
                {{ now().strftime('%a') in selected_days }}
              {% else %}
                {{ true }}
              {% endif %}
        sequence:
          # 2.1 –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–£—Å–ª–æ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏)
          - alias: –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –û—Ç—á–µ—Ç –æ –Ω–µ–∑–∞—Ä—è–∂–∞–µ–º—ã—Ö (–£—Å–ª–æ–≤–Ω–æ)
            choose:
              - conditions:
                  - condition: template
                    value_template: "{{ mobile_device_id is not none and mobile_device_id != '' }}"
                sequence:
                  - service: notify.mobile_app_{{ device_attr(mobile_device_id, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                    data:
                      title: "ü™´ –¢–†–ï–ë–£–ï–¢–°–Ø –ó–ê–ú–ï–ù–ê: –ë–∞—Ç–∞—Ä–µ–∏, –∑–∞—Ä—è–¥ < {{ critical_threshold }}%"
                      message: "{{ disposable_message }}"
          
          # 2.2 –°–µ—Ä–≤–∏—Å Telegram Bot (MarkdownV2) (–£—Å–ª–æ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏)
          - alias: Telegram - –û—Ç—á–µ—Ç –æ –Ω–µ–∑–∞—Ä—è–∂–∞–µ–º—ã—Ö (–£—Å–ª–æ–≤–Ω–æ)
            choose:
              - conditions:
                  - condition: template
                    value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
                sequence:
                  - service: telegram_bot.send_message
                    data:
                      chat_id: >-
                        {% set entity_id = telegram_target_id.entity_id[0] %}
                        {% set parts = entity_id.split('_') %}
                        {{ parts[-1] }}
                      message: |
                        {% set report_body = disposable_message %}
                        {% set header = "ü™´ –¢–†–ï–ë–£–ï–¢–°–Ø –ó–ê–ú–ï–ù–ê: –ë–∞—Ç–∞—Ä–µ–∏, –∑–∞—Ä—è–¥ < " ~ critical_threshold ~ "%" %}
                        
                        {# –ü–æ–ª–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2 #}
                        {% set escaped_body = report_body | replace('&', '&') | replace('~', '\~') | replace('`', '\`') | replace('>', '\>') | replace('#', '\#') | replace('+', '\+') | replace('-', '\-') | replace('=', '\=') | replace('|', '\|') | replace('{', '\{') | replace('}', '\}') | replace('.', '\.') | replace('!', '\!') | replace('*', '\*') | replace('_', '\_') | replace('[', '\[') | replace(']', '\]') | replace('(', '\(') | replace(')', '\)') | replace('%', '\%') %}
                        {{ header ~ "\n\n" ~ escaped_body }}
                      parse_mode: markdownv2
      
  # ----------------------------------------------------------------------
  # 3. –û–¢–ü–†–ê–í–ö–ê –û–¢–ß–ï–¢–ê 2: –ó–ê–†–Ø–ñ–ê–ï–ú–´–ï (–ó–ê–†–Ø–î–ö–ê)
  #    –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω–µ–π –¥–ª—è –ö–†–ê–¢–ö–û–ì–û –û–¢–ß–ï–¢–ê.
  # ----------------------------------------------------------------------
  - alias: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –û—Ç—á–µ—Ç 2 - –ó–∞—Ä—è–∂–∞–µ–º—ã–µ (–£—Å–ª–æ–≤–Ω–æ)
    choose:
      # –ì–ª–∞–≤–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ö–†–ê–¢–ö–û–ì–û –û–¢–ß–ï–¢–ê
      - conditions:
          - condition: template
            value_template: >
              {% set selected_days = trigger_days %}
              {% if selected_days | length > 0 %}
                {{ now().strftime('%a') in selected_days }}
              {% else %}
                {{ true }}
              {% endif %}
        sequence:
          # 3.1 –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–£—Å–ª–æ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏)
          - alias: –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –û—Ç—á–µ—Ç –æ –∑–∞—Ä—è–∂–∞–µ–º—ã—Ö (–£—Å–ª–æ–≤–Ω–æ)
            choose:
              - conditions:
                  - condition: template
                    value_template: "{{ mobile_device_id is not none and mobile_device_id != '' }}"
                sequence:
                  - service: notify.mobile_app_{{ device_attr(mobile_device_id, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                    data:
                      title: "üîå –¢–†–ï–ë–£–ï–¢–°–Ø –ó–ê–†–Ø–î–ö–ê: –ó–∞—Ä—è–¥ < {{ critical_threshold }}%"
                      message: "{{ rechargeable_message }}"
          
          # 3.2 –°–µ—Ä–≤–∏—Å Telegram Bot (MarkdownV2) (–£—Å–ª–æ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏)
          - alias: Telegram - –û—Ç—á–µ—Ç –æ –∑–∞—Ä—è–∂–∞–µ–º—ã—Ö (–£—Å–ª–æ–≤–Ω–æ)
            choose:
              - conditions:
                  - condition: template
                    value_template: "{{ telegram_target_id.entity_id | length > 0 }}"
                sequence:
                  - service: telegram_bot.send_message
                    data:
                      chat_id: >-
                        {% set entity_id = telegram_target_id.entity_id[0] %}
                        {% set parts = entity_id.split('_') %}
                        {{ parts[-1] }}
                      message: |
                        {% set report_body = rechargeable_message %}
                        {% set header = "üîå –¢–†–ï–ë–£–ï–¢–°–Ø –ó–ê–†–Ø–î–ö–ê: –ó–∞—Ä—è–¥ < " ~ critical_threshold ~ "%" %}
                        
                        {# –ü–æ–ª–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2 #}
                        {% set escaped_body = report_body | replace('&', '&') | replace('~', '\~') | replace('`', '\`') | replace('>', '\>') | replace('#', '\#') | replace('+', '\+') | replace('-', '\-') | replace('=', '\=') | replace('|', '\|') | replace('{', '\{') | replace('}', '\}') | replace('.', '\.') | replace('!', '\!') | replace('*', '\*') | replace('_', '\_') | replace('[', '\[') | replace(']', '\]') | replace('(', '\(') | replace(')', '\)') | replace('%', '\%') %}
                        {{ header ~ "\n\n" ~ escaped_body }}
                      parse_mode: markdownv2
      
  # ----------------------------------------------------------------------
  # 4. –û–¢–ü–†–ê–í–ö–ê –û–¢–ß–ï–¢–ê 3: –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û)
  #    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥–Ω–µ–π –ö–†–ê–¢–ö–û–ì–û –æ—Ç—á–µ—Ç–∞.
  # ----------------------------------------------------------------------
  - alias: Telegram - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (–£—Å–ª–æ–≤–Ω–æ)
    choose:
      - conditions:
          - condition: template
            value_template: "{{ telegram_target_id.entity_id | length > 0 and send_full_report }}"
          - condition: template
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ü–û–õ–ù–û–ì–û –û–¢–ß–ï–¢–ê
            value_template: >
              {% set selected_days = full_report_days %}
              {% if selected_days | length > 0 %}
                {{ now().strftime('%a') in selected_days }}
              {% else %}
                {{ true }}
              {% endif %}
        sequence:
          - variables:
              # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ü–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (—Å –ø–æ–ª–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
              full_report_title: "üîã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –±–∞—Ç–∞—Ä–µ—è–º (–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ —É—Ä–æ–≤–Ω—é):"
              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ç–∏–ø—É –±–∞—Ç–∞—Ä–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
              full_report_message: "{{ full_report_title ~ '\n\n' ~ full_report_body_list ~ '\n\n' ~ battery_types_summary }}"
              
          - service: telegram_bot.send_message
            data:
              chat_id: >-
                {% set entity_id = telegram_target_id.entity_id[0] %}
                {% set parts = entity_id.split('_') %}
                {{ parts[-1] }}
              message: |
                {% set report_body = full_report_message %}
                {# –ü–æ–ª–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2 #}
                {% set escaped_body = report_body | replace('&', '&') | replace('~', '\~') | replace('`', '\`') | replace('>', '\>') | replace('#', '\#') | replace('+', '\+') | replace('-', '\-') | replace('=', '\=') | replace('|', '\|') | replace('{', '\{') | replace('}', '\}') | replace('.', '\.') | replace('!', '\!') | replace('*', '\*') | replace('_', '\_') | replace('[', '\[') | replace(']', '\]') | replace('(', '\(') | replace(')', '\)') | replace('%', '\%') %}
                {{ escaped_body }}
              parse_mode: markdownv2
      
mode: single
